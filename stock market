import streamlit as st
import yfinance as yf
import numpy as np
import pandas as pd
import plotly.graph_objs as go
from sklearn.preprocessing import MinMaxScaler
from sklearn.metrics import mean_squared_error
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense, LSTM

# Streamlit app title
st.title("Stock Price Prediction using LSTM")

# User input for stock ticker and date range
ticker = st.text_input("Enter Stock Ticker (e.g., AAPL, TSLA):", "AAPL")
start_date = st.date_input("Start Date", value=pd.to_datetime("2020-01-01"))
end_date = st.date_input("End Date", value=pd.to_datetime("today"))

# Load stock data
st.write(f"Fetching data for {ticker}...")
data = yf.download(ticker, start=start_date, end=end_date)

# Check if data is available
if data.empty:
    st.error("No data found. Please check the ticker symbol or date range.")
else:
    st.write(f"Data for {ticker}:")
    st.write(data.tail())

    # Plot stock price
    st.subheader("Stock Price Over Time")
    fig = go.Figure()
    fig.add_trace(go.Scatter(x=data.index, y=data['Close'], mode='lines', name='Close Price'))
    st.plotly_chart(fig)

    # Prepare data for LSTM model
    data['Close'] = data['Close'].fillna(method='ffill')
    scaler = MinMaxScaler(feature_range=(0, 1))
    scaled_data = scaler.fit_transform(data[['Close']].values)

    # Create training and test sets
    train_size = int(len(scaled_data) * 0.8)
    train_data = scaled_data[:train_size]
    test_data = scaled_data[train_size:]

    # Function to create dataset with look-back
    def create_dataset(dataset, look_back=60):
        X, y = [], []
        for i in range(look_back, len(dataset)):
            X.append(dataset[i-look_back:i, 0])
            y.append(dataset[i, 0])
        return np.array(X), np.array(y)

    # Prepare training and testing datasets
    look_back = 60
    X_train, y_train = create_dataset(train_data, look_back)
    X_test, y_test = create_dataset(test_data, look_back)

    # Reshape input to be [samples, time steps, features] for LSTM
    X_train = X_train.reshape((X_train.shape[0], X_train.shape[1], 1))
    X_test = X_test.reshape((X_test.shape[0], X_test.shape[1], 1))

    # Build LSTM model
    model = Sequential()
    model.add(LSTM(50, return_sequences=True, input_shape=(look_back, 1)))
    model.add(LSTM(50))
    model.add(Dense(1))
    model.compile(optimizer='adam', loss='mean_squared_error')

    # Train the model
    st.write("Training the model...")
    model.fit(X_train, y_train, epochs=10, batch_size=32)

    # Make predictions
    train_predictions = model.predict(X_train)
    test_predictions = model.predict(X_test)

    # Inverse transform the predictions
    train_predictions = scaler.inverse_transform(train_predictions)
    y_train = scaler.inverse_transform(y_train.reshape(-1, 1))
    test_predictions = scaler.inverse_transform(test_predictions)
    y_test = scaler.inverse_transform(y_test.reshape(-1, 1))

    # Calculate RMSE
    train_rmse = np.sqrt(mean_squared_error(y_train, train_predictions))
    test_rmse = np.sqrt(mean_squared_error(y_test, test_predictions))
    st.write(f"Train RMSE: {train_rmse:.4f}")
    st.write(f"Test RMSE: {test_rmse:.4f}")

    # Plot predictions
    st.subheader("Stock Price Prediction")
    test_data_plot = data.iloc[train_size + look_back:].index

    fig2 = go.Figure()
    fig2.add_trace(go.Scatter(x=data.index, y=data['Close'], mode='lines', name='Actual Price'))
    fig2.add_trace(go.Scatter(x=test_data_plot, y=test_predictions.flatten(), mode='lines', name='Predicted Price'))
    st.plotly_chart(fig2)

    st.success("LSTM Stock Prediction Completed!")
